<?xml version="1.1" encoding="UTF-8"?>
<flow-definition plugin="workflow-job">
  <actions/>
  <description>ShopSphere CI/CD Pipeline - Webhook triggered build, test, and deploy</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github">
      <projectUrl>https://github.com/Navpan18/ShopSphere/</projectUrl>
      <displayName/>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <com.cloudbees.jenkins.GitHubPushTrigger plugin="github">
          <spec/>
        </com.cloudbees.jenkins.GitHubPushTrigger>
        <org.jenkinsci.plugins.gwt.GenericTrigger plugin="generic-webhook-trigger">
          <spec/>
          <genericVariables/>
          <regexpFilterText/>
          <regexpFilterExpression/>
          <genericRequestVariables/>
          <genericHeaderVariables/>
          <printPostContent>true</printPostContent>
          <printContributedVariables>true</printContributedVariables>
          <causeString>Triggered by GitHub webhook</causeString>
          <token>shopsphere-webhook-token</token>
          <tokenCredentialId/>
          <silentResponse>false</silentResponse>
          <overrideQuietPeriod>false</overrideQuietPeriod>
          <shouldNotFlattern>false</shouldNotFlattern>
          <allowSeveralTriggersPerBuild>false</allowSeveralTriggersPerBuild>
        </org.jenkinsci.plugins.gwt.GenericTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps">
    <script>pipeline {
    agent any
    
    environment {
        REPO_URL = "https://github.com/Navpan18/ShopSphere.git"
        BRANCH = "main"
        APP_NAME = "shopsphere"
        BUILD_NUMBER = "${env.BUILD_NUMBER}"
        WORKSPACE_DIR = "${env.WORKSPACE}"
    }
    
    stages {
        stage('üîÑ Checkout Code') {
            steps {
                script {
                    echo "=== Starting ShopSphere CI/CD Pipeline ==="
                    echo "Build: ${BUILD_NUMBER}"
                    echo "Workspace: ${WORKSPACE_DIR}"
                    echo "Triggered by: ${env.BUILD_CAUSE ?: 'Manual'}"
                }
                
                // Clean workspace and checkout fresh code
                cleanWs()
                
                script {
                    try {
                        git branch: "${BRANCH}", url: "${REPO_URL}"
                        echo "‚úÖ Successfully checked out code from ${REPO_URL}"
                        
                        // Get commit info
                        env.GIT_COMMIT_SHORT = sh(
                            script: 'git rev-parse --short HEAD',
                            returnStdout: true
                        ).trim()
                        
                        env.GIT_COMMIT_MESSAGE = sh(
                            script: 'git log -1 --pretty=%B',
                            returnStdout: true
                        ).trim()
                        
                        echo "Git Commit: ${env.GIT_COMMIT_SHORT}"
                        echo "Commit Message: ${env.GIT_COMMIT_MESSAGE}"
                        
                    } catch (Exception e) {
                        echo "‚ùå Git checkout failed: ${e.getMessage()}"
                        error("Failed to checkout code")
                    }
                }
            }
        }
        
        stage('üîç Environment &amp; Project Validation') {
            parallel {
                stage('System Environment') {
                    steps {
                        sh '''
                            echo "=== System Information ==="
                            echo "Hostname: $(hostname)"
                            echo "Current User: $(whoami)"
                            echo "Current Directory: $(pwd)"
                            echo "Date: $(date)"
                            echo ""
                            echo "=== Tool Versions ==="
                            docker --version || echo "‚ö†Ô∏è  Docker not available"
                            docker-compose --version || echo "‚ö†Ô∏è  Docker Compose not available"
                            python3 --version || echo "‚ö†Ô∏è  Python3 not available"
                            node --version || echo "‚ö†Ô∏è  Node.js not available"
                            npm --version || echo "‚ö†Ô∏è  NPM not available"
                        '''
                    }
                }
                
                stage('Project Structure') {
                    steps {
                        sh '''
                            echo "=== Project Structure Validation ==="
                            echo "Repository contents:"
                            ls -la
                            echo ""
                            echo "=== Critical Files Check ==="
                            [ -d "backend" ] && echo "‚úÖ Backend directory found" || echo "‚ùå Backend directory missing"
                            [ -d "frontend" ] && echo "‚úÖ Frontend directory found" || echo "‚ùå Frontend directory missing"
                            [ -f "docker-compose.yml" ] && echo "‚úÖ Docker Compose file found" || echo "‚ùå Docker Compose file missing"
                            [ -f "Jenkinsfile" ] && echo "‚úÖ Jenkinsfile found" || echo "‚ùå Jenkinsfile missing"
                            [ -f "backend/requirements.txt" ] && echo "‚úÖ Backend requirements.txt found" || echo "‚ùå Backend requirements.txt missing"
                            [ -f "frontend/package.json" ] && echo "‚úÖ Frontend package.json found" || echo "‚ùå Frontend package.json missing"
                            echo ""
                            echo "=== Backend Structure ==="
                            [ -d "backend" ] && find backend -name "*.py" | head -10 || echo "No Python files found"
                            echo ""
                            echo "=== Frontend Structure ==="
                            [ -d "frontend" ] && find frontend -name "*.js" -o -name "*.jsx" | head -10 || echo "No JS/JSX files found"
                        '''
                    }
                }
            }
        }
        
        stage('üß™ Backend Testing') {
            steps {
                script {
                    echo "=== Backend Testing Phase ==="
                }
                
                dir('backend') {
                    sh '''
                        echo "=== Backend Dependencies Installation ==="
                        if [ -f "requirements.txt" ]; then
                            echo "Installing Python dependencies..."
                            pip3 install --user -r requirements.txt || {
                                echo "‚ö†Ô∏è  Failed to install some dependencies, continuing..."
                            }
                        else
                            echo "‚ùå requirements.txt not found"
                        fi
                        echo ""
                        
                        echo "=== Python Code Validation ==="
                        echo "Checking Python syntax for all .py files..."
                        find . -name "*.py" -exec python3 -m py_compile {} \\; || {
                            echo "‚ö†Ô∏è  Some Python files have syntax errors"
                        }
                        echo ""
                        
                        echo "=== Application Structure Check ==="
                        [ -f "main.py" ] && echo "‚úÖ main.py found" || echo "‚ùå main.py missing"
                        [ -d "app" ] && echo "‚úÖ app directory found" || echo "‚ùå app directory missing"
                        [ -f "app/main.py" ] && echo "‚úÖ app/main.py found" || echo "‚ùå app/main.py missing"
                        
                        echo "=== Running Basic Tests ==="
                        if [ -d "tests" ]; then
                            echo "Running pytest..."
                            python3 -m pytest tests/ -v || echo "‚ö†Ô∏è  Some tests failed"
                        else
                            echo "No tests directory found, skipping tests"
                        fi
                    '''
                }
            }
        }
        
        stage('üåê Frontend Testing') {
            steps {
                script {
                    echo "=== Frontend Testing Phase ==="
                }
                
                dir('frontend') {
                    sh '''
                        echo "=== Frontend Dependencies Check ==="
                        if [ -f "package.json" ]; then
                            echo "package.json found:"
                            cat package.json | head -20
                            echo ""
                            
                            echo "=== NPM Install (if possible) ==="
                            npm install || {
                                echo "‚ö†Ô∏è  NPM install failed, checking project structure anyway..."
                            }
                        else
                            echo "‚ùå package.json not found"
                        fi
                        echo ""
                        
                        echo "=== Frontend Structure Validation ==="
                        [ -d "src" ] && echo "‚úÖ src directory found" || echo "‚ùå src directory missing"
                        [ -f "next.config.mjs" ] && echo "‚úÖ Next.js config found" || echo "‚ùå Next.js config missing"
                        [ -d "public" ] && echo "‚úÖ public directory found" || echo "‚ùå public directory missing"
                        
                        if [ -d "src" ]; then
                            echo "Source files found:"
                            find src -name "*.js" -o -name "*.jsx" | head -10
                        fi
                        
                        echo "=== Running Frontend Tests ==="
                        if [ -f "package.json" ] && grep -q "test" package.json; then
                            npm test || echo "‚ö†Ô∏è  Frontend tests failed"
                        else
                            echo "No test script found in package.json"
                        fi
                    '''
                }
            }
        }
        
        stage('üê≥ Docker Build &amp; Deploy') {
            steps {
                script {
                    echo "=== Docker Build and Local Deployment ==="
                }
                
                sh '''
                    echo "=== Docker Configuration Check ==="
                    if [ -f "docker-compose.yml" ]; then
                        echo "‚úÖ docker-compose.yml found"
                        echo "Validating docker-compose configuration..."
                        docker-compose config --quiet && echo "‚úÖ Docker Compose config valid" || echo "‚ö†Ô∏è  Docker Compose config issues"
                        echo ""
                        
                        echo "=== Current Docker Status ==="
                        docker ps --format "table {{.Names}}\\t{{.Status}}\\t{{.Ports}}" || echo "‚ö†Ô∏è  Docker not available"
                        echo ""
                        
                        echo "=== Building Services ==="
                        # Build the services
                        docker-compose build --no-cache || {
                            echo "‚ö†Ô∏è  Docker build failed, continuing anyway..."
                        }
                        echo ""
                        
                        echo "=== Deploying Services Locally ==="
                        # Stop any existing services first
                        docker-compose down || echo "No existing services to stop"
                        
                        # Start services in detached mode
                        docker-compose up -d || {
                            echo "‚ö†Ô∏è  Failed to start services with docker-compose"
                        }
                        
                        # Wait a moment for services to start
                        sleep 10
                        
                        echo "=== Deployment Status ==="
                        docker-compose ps || echo "Could not get service status"
                        
                        echo "=== Service Health Check ==="
                        # Check if services are responding
                        if curl -f http://localhost:3000 > /dev/null 2>&1; then
                            echo "‚úÖ Frontend service is responding"
                        else
                            echo "‚ö†Ô∏è  Frontend service not responding"
                        fi
                        
                        if curl -f http://localhost:8000 > /dev/null 2>&1; then
                            echo "‚úÖ Backend service is responding"
                        else
                            echo "‚ö†Ô∏è  Backend service not responding"
                        fi
                        
                    else
                        echo "‚ùå docker-compose.yml not found"
                        echo "Checking for individual Dockerfiles..."
                        find . -name "Dockerfile" -exec echo "Found: {}" \\;
                    fi
                '''
            }
        }
        
        stage('üìä Deployment Summary') {
            steps {
                script {
                    echo "=== Build and Deployment Summary ==="
                    
                    // Create build summary
                    sh '''
                        echo "=== Creating Build Summary ==="
                        cat > build-summary.txt << EOF
ShopSphere CI/CD Pipeline Summary
================================
Build Number: ${BUILD_NUMBER}
Git Commit: ${GIT_COMMIT_SHORT}
Commit Message: ${GIT_COMMIT_MESSAGE}
Build Date: $(date)
Build Status: SUCCESS
Triggered By: Webhook

Services Status:
$(docker-compose ps 2>/dev/null || echo "Docker Compose not available")

Next Steps:
- Services should be available at:
  * Frontend: http://localhost:3000
  * Backend: http://localhost:8000
  * Database: localhost:5432

EOF
                        
                        echo "Build summary created:"
                        cat build-summary.txt
                    '''
                    
                    echo "üéâ Pipeline completed successfully!"
                    echo "üìç Services deployed locally"
                    echo "üîó Frontend: http://localhost:3000"
                    echo "üîó Backend: http://localhost:8000"
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "=== Pipeline Post Actions ==="
                echo "Build Status: ${currentBuild.currentResult}"
                echo "Duration: ${currentBuild.durationString}"
                echo "Workspace: ${env.WORKSPACE}"
            }
            
            // Archive build artifacts
            archiveArtifacts artifacts: 'build-summary.txt', allowEmptyArchive: true
            
            // Clean up build artifacts but keep workspace for debugging
            script {
                if (currentBuild.currentResult == 'SUCCESS') {
                    echo "‚úÖ Build successful - keeping workspace for debugging"
                } else {
                    echo "‚ùå Build failed - check logs above"
                }
            }
        }
        
        success {
            echo "üéâ Pipeline completed successfully!"
            echo "Services have been deployed locally and should be accessible."
        }
        
        failure {
            echo "‚ùå Pipeline failed!"
            echo "Check the logs above for error details."
        }
        
        unstable {
            echo "‚ö†Ô∏è  Pipeline completed with warnings!"
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
